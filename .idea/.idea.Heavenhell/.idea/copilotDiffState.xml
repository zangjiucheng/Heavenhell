<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Character/ReportFiller.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Character/ReportFiller.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using TMPro;&#10;&#10;&#10;&#10;&#10;public class ReportFiller : MonoBehaviour&#10;{&#10;    [Header(&quot;Character Reference&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;Character component to read profile data from&quot;)]&#10;    public Character character;&#10;    &#10;    [Header(&quot;Fields Container&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;Container holding all the field objects (optional - will auto-find 'Fields' if not set)&quot;)]&#10;    private Transform fieldsContainer;&#10;    &#10;    [Header(&quot;Collider Reference&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;BoxCollider2D to detect clicks outside (optional - will auto-find if not set)&quot;)]&#10;    private BoxCollider2D boxCollider;&#10;    &#10;    private TMP_Text nameField;&#10;    private TMP_Text dobField;&#10;    private TMP_Text dodField;&#10;    private TMP_Text jobField;&#10;    private TMP_Text evilTop1Field;&#10;    private TMP_Text evilTop2Field;&#10;    private TMP_Text evilTop3Field;&#10;    &#10;    // Start is called once before the first execution of Update after the MonoBehaviour is created&#10;    void Start()&#10;    {&#10;        // Auto-find the BoxCollider2D if not manually assigned&#10;        if (boxCollider == null)&#10;        {&#10;            boxCollider = GetComponent&lt;BoxCollider2D&gt;();&#10;            if (boxCollider == null)&#10;            {&#10;                Debug.LogWarning(&quot;No BoxCollider2D found on ReportFiller. Click-outside detection will not work.&quot;);&#10;            }&#10;        }&#10;        &#10;        // Auto-find the Fields container if not manually assigned&#10;        if (fieldsContainer == null)&#10;        {&#10;            fieldsContainer = transform.Find(&quot;Fields&quot;);&#10;            if (fieldsContainer == null)&#10;            {&#10;                Debug.LogError(&quot;Could not find 'Fields' container in Character Report prefab!&quot;);&#10;                return;&#10;            }&#10;        }&#10;        &#10;        // Find all the field objects and their TMP_Text components&#10;        FindFieldComponents();&#10;        &#10;        // Fill the report with character data&#10;        FillReport();&#10;    }&#10;&#10;    // Update is called once per frame&#10;    void Update()&#10;    {&#10;        // Check for ESC key press&#10;        if (Input.GetKeyDown(KeyCode.Escape))&#10;        {&#10;            CloseReport();&#10;            return;&#10;        }&#10;        &#10;        // Check for mouse click outside the box collider&#10;        if (Input.GetMouseButtonDown(0)) // Left mouse button&#10;        {&#10;            if (boxCollider != null)&#10;            {&#10;                Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);&#10;                &#10;                // Check if the click is outside the box collider&#10;                if (!boxCollider.OverlapPoint(mousePosition))&#10;                {&#10;                    CloseReport();&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void FindFieldComponents()&#10;    {&#10;        // Find each field by name and get its TMP_Text component&#10;        Transform nameTransform = fieldsContainer.Find(&quot;Name&quot;);&#10;        if (nameTransform != null)&#10;            nameField = nameTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform dobTransform = fieldsContainer.Find(&quot;DOB&quot;);&#10;        if (dobTransform != null)&#10;            dobField = dobTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform dodTransform = fieldsContainer.Find(&quot;DOD&quot;);&#10;        if (dodTransform != null)&#10;            dodField = dodTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform jobTransform = fieldsContainer.Find(&quot;Job&quot;);&#10;        if (jobTransform != null)&#10;            jobField = jobTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil1Transform = fieldsContainer.Find(&quot;Evil Top 1&quot;);&#10;        if (evil1Transform != null)&#10;            evilTop1Field = evil1Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil2Transform = fieldsContainer.Find(&quot;Evil Top 2&quot;);&#10;        if (evil2Transform != null)&#10;            evilTop2Field = evil2Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil3Transform = fieldsContainer.Find(&quot;Evil Top 3&quot;);&#10;        if (evil3Transform != null)&#10;            evilTop3Field = evil3Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        &#10;        &#10;        // Log warnings for any missing fields&#10;        if (nameField == null) Debug.LogWarning(&quot;Name field or its TMP_Text component not found!&quot;);&#10;        if (dobField == null) Debug.LogWarning(&quot;DOB field or its TMP_Text component not found!&quot;);&#10;        if (dodField == null) Debug.LogWarning(&quot;DOD field or its TMP_Text component not found!&quot;);&#10;        if (jobField == null) Debug.LogWarning(&quot;Job field or its TMP_Text component not found!&quot;);&#10;        if (evilTop1Field == null) Debug.LogWarning(&quot;Evil Top 1 field or its TMP_Text component not found!&quot;);&#10;        if (evilTop2Field == null) Debug.LogWarning(&quot;Evil Top 2 field or its TMP_Text component not found!&quot;);&#10;        if (evilTop3Field == null) Debug.LogWarning(&quot;Evil Top 3 field or its TMP_Text component not found!&quot;);&#10;    }&#10;    &#10;    private void FillReport()&#10;    {&#10;        if (character == null)&#10;        {&#10;            Debug.LogError(&quot;Character reference is not assigned in ReportFiller!&quot;);&#10;            return;&#10;        }&#10;        &#10;        CharacterProfileData profile = character.ProfileData;&#10;        &#10;        if (profile == null)&#10;        {&#10;            Debug.LogError(&quot;Character profile data is null!&quot;);&#10;            return;&#10;        }&#10;        &#10;        // Fill in the basic information&#10;        if (nameField != null)&#10;            nameField.text = profile.Name ?? &quot;Unknown&quot;;&#10;        &#10;        if (dobField != null)&#10;            dobField.text = profile.DOB ?? &quot;Unknown&quot;;&#10;        &#10;        if (dodField != null)&#10;            dodField.text = profile.DOD ?? &quot;Unknown&quot;;&#10;        &#10;        if (jobField != null)&#10;            jobField.text = profile.Work ?? &quot;Unknown&quot;;&#10;        &#10;        // Fill in the evil deeds (top 3)&#10;        if (profile.EvilList != null &amp;&amp; profile.EvilList.Length &gt; 0)&#10;        {&#10;            if (evilTop1Field != null &amp;&amp; profile.EvilList.Length &gt; 0)&#10;                evilTop1Field.text = profile.EvilList[0]?.title ?? &quot;None&quot;;&#10;            &#10;            if (evilTop2Field != null &amp;&amp; profile.EvilList.Length &gt; 1)&#10;                evilTop2Field.text = profile.EvilList[1]?.title ?? &quot;None&quot;;&#10;            &#10;            if (evilTop3Field != null &amp;&amp; profile.EvilList.Length &gt; 2)&#10;                evilTop3Field.text = profile.EvilList[2]?.title ?? &quot;None&quot;;&#10;        }&#10;        else&#10;        {&#10;            if (evilTop1Field != null) evilTop1Field.text = &quot;None&quot;;&#10;            if (evilTop2Field != null) evilTop2Field.text = &quot;None&quot;;&#10;            if (evilTop3Field != null) evilTop3Field.text = &quot;None&quot;;&#10;        }&#10;        &#10;        Debug.Log($&quot;Report filled for character: {profile.Name}&quot;);&#10;    }&#10;    &#10;    // Public method to refresh the report if character data changes&#10;    public void RefreshReport()&#10;    {&#10;        FillReport();&#10;    }&#10;    &#10;    // Close and dispose of the report&#10;    private void CloseReport()&#10;    {&#10;        Debug.Log($&quot;Closing report for character: {character?.ProfileData?.Name ?? &quot;Unknown&quot;}&quot;);&#10;        Destroy(gameObject);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using TMPro;&#10;&#10;&#10;&#10;&#10;public class ReportFiller : MonoBehaviour&#10;{&#10;    [Header(&quot;Character Reference&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;Character component to read profile data from&quot;)]&#10;    public Character character;&#10;    &#10;    [Header(&quot;Fields Container&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;Container holding all the field objects (optional - will auto-find 'Fields' if not set)&quot;)]&#10;    private Transform fieldsContainer;&#10;    &#10;    [Header(&quot;Collider Reference&quot;)]&#10;    [SerializeField]&#10;    [Tooltip(&quot;BoxCollider2D to detect clicks outside (optional - will auto-find if not set)&quot;)]&#10;    private BoxCollider2D boxCollider;&#10;    &#10;    private TMP_Text nameField;&#10;    private TMP_Text dobField;&#10;    private TMP_Text dodField;&#10;    private TMP_Text jobField;&#10;    private TMP_Text evilTop1Field;&#10;    private TMP_Text evilTop2Field;&#10;    private TMP_Text evilTop3Field;&#10;    &#10;    // Start is called once before the first execution of Update after the MonoBehaviour is created&#10;    void Start()&#10;    {&#10;        // Auto-find the BoxCollider2D if not manually assigned&#10;        if (boxCollider == null)&#10;        {&#10;            boxCollider = GetComponent&lt;BoxCollider2D&gt;();&#10;            if (boxCollider == null)&#10;            {&#10;                Debug.LogWarning(&quot;No BoxCollider2D found on ReportFiller. Click-outside detection will not work.&quot;);&#10;            }&#10;        }&#10;        &#10;        // Auto-find the Fields container if not manually assigned&#10;        if (fieldsContainer == null)&#10;        {&#10;            fieldsContainer = transform.Find(&quot;Fields&quot;);&#10;            if (fieldsContainer == null)&#10;            {&#10;                Debug.LogError(&quot;Could not find 'Fields' container in Character Report prefab!&quot;);&#10;                return;&#10;            }&#10;        }&#10;        &#10;        // Find all the field objects and their TMP_Text components&#10;        FindFieldComponents();&#10;        &#10;        // Fill the report with character data&#10;        FillReport();&#10;    }&#10;&#10;    // Update is called once per frame&#10;    void Update()&#10;    {&#10;        // Check for ESC key press&#10;        if (Input.GetKeyDown(KeyCode.Escape))&#10;        {&#10;            CloseReport();&#10;            return;&#10;        }&#10;        &#10;        // Check for mouse click outside the box collider&#10;        if (Input.GetMouseButtonDown(0)) // Left mouse button&#10;        {&#10;            if (boxCollider != null)&#10;            {&#10;                Vector2 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);&#10;                &#10;                // Check if the click is outside the box collider&#10;                if (!boxCollider.OverlapPoint(mousePosition))&#10;                {&#10;                    CloseReport();&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    private void FindFieldComponents()&#10;    {&#10;        // Find each field by name and get its TMP_Text component&#10;        Transform nameTransform = fieldsContainer.Find(&quot;Name&quot;);&#10;        if (nameTransform != null)&#10;            nameField = nameTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform dobTransform = fieldsContainer.Find(&quot;DOB&quot;);&#10;        if (dobTransform != null)&#10;            dobField = dobTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform dodTransform = fieldsContainer.Find(&quot;DOD&quot;);&#10;        if (dodTransform != null)&#10;            dodField = dodTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform jobTransform = fieldsContainer.Find(&quot;Job&quot;);&#10;        if (jobTransform != null)&#10;            jobField = jobTransform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil1Transform = fieldsContainer.Find(&quot;Evil Top 1&quot;);&#10;        if (evil1Transform != null)&#10;            evilTop1Field = evil1Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil2Transform = fieldsContainer.Find(&quot;Evil Top 2&quot;);&#10;        if (evil2Transform != null)&#10;            evilTop2Field = evil2Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        Transform evil3Transform = fieldsContainer.Find(&quot;Evil Top 3&quot;);&#10;        if (evil3Transform != null)&#10;            evilTop3Field = evil3Transform.GetComponent&lt;TMP_Text&gt;();&#10;        &#10;        &#10;        &#10;        // Log warnings for any missing fields&#10;        if (nameField == null) Debug.LogWarning(&quot;Name field or its TMP_Text component not found!&quot;);&#10;        if (dobField == null) Debug.LogWarning(&quot;DOB field or its TMP_Text component not found!&quot;);&#10;        if (dodField == null) Debug.LogWarning(&quot;DOD field or its TMP_Text component not found!&quot;);&#10;        if (jobField == null) Debug.LogWarning(&quot;Job field or its TMP_Text component not found!&quot;);&#10;        if (evilTop1Field == null) Debug.LogWarning(&quot;Evil Top 1 field or its TMP_Text component not found!&quot;);&#10;        if (evilTop2Field == null) Debug.LogWarning(&quot;Evil Top 2 field or its TMP_Text component not found!&quot;);&#10;        if (evilTop3Field == null) Debug.LogWarning(&quot;Evil Top 3 field or its TMP_Text component not found!&quot;);&#10;    }&#10;    &#10;    private void FillReport()&#10;    {&#10;        if (character == null)&#10;        {&#10;            Debug.LogError(&quot;Character reference is not assigned in ReportFiller!&quot;);&#10;            return;&#10;        }&#10;        &#10;        CharacterProfileData profile = character.ProfileData;&#10;        &#10;        if (profile == null)&#10;        {&#10;            Debug.LogError(&quot;Character profile data is null!&quot;);&#10;            return;&#10;        }&#10;        &#10;        // Fill in the basic information&#10;        if (nameField != null)&#10;            nameField.text = profile.Name ?? &quot;Unknown&quot;;&#10;        &#10;        if (dobField != null)&#10;            dobField.text = profile.DOB ?? &quot;Unknown&quot;;&#10;        &#10;        if (dodField != null)&#10;            dodField.text = profile.DOD ?? &quot;Unknown&quot;;&#10;        &#10;        if (jobField != null)&#10;            jobField.text = profile.Work ?? &quot;Unknown&quot;;&#10;        &#10;        // Fill in the evil deeds (top 3)&#10;        if (profile.EvilList != null &amp;&amp; profile.EvilList.Length &gt; 0)&#10;        {&#10;            if (evilTop1Field != null &amp;&amp; profile.EvilList.Length &gt; 0)&#10;                evilTop1Field.text = profile.EvilList[0]?.title ?? &quot;None&quot;;&#10;            &#10;            if (evilTop2Field != null &amp;&amp; profile.EvilList.Length &gt; 1)&#10;                evilTop2Field.text = profile.EvilList[1]?.title ?? &quot;None&quot;;&#10;            &#10;            if (evilTop3Field != null &amp;&amp; profile.EvilList.Length &gt; 2)&#10;                evilTop3Field.text = profile.EvilList[2]?.title ?? &quot;None&quot;;&#10;        }&#10;        else&#10;        {&#10;            if (evilTop1Field != null) evilTop1Field.text = &quot;None&quot;;&#10;            if (evilTop2Field != null) evilTop2Field.text = &quot;None&quot;;&#10;            if (evilTop3Field != null) evilTop3Field.text = &quot;None&quot;;&#10;        }&#10;        &#10;        Debug.Log($&quot;Report filled for character: {profile.Name}&quot;);&#10;    }&#10;    &#10;    // Public method to refresh the report if character data changes&#10;    public void RefreshReport()&#10;    {&#10;        FillReport();&#10;    }&#10;    &#10;    // Close and dispose of the report&#10;    private void CloseReport()&#10;    {&#10;        Debug.Log($&quot;Closing report for character: {character?.ProfileData?.Name ?? &quot;Unknown&quot;}&quot;);&#10;        Destroy(gameObject);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>